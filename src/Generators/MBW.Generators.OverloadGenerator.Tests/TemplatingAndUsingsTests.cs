using System.Collections.Generic;
using MBW.Generators.OverloadGenerator.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class TemplatingAndUsingsTests
{
    [Fact]
    public void Usings_AreInjectedAndDeduplicated()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;
                                  using System;

                                  public enum K { A }

                                  public partial class U
                                  {
                                      [TransformOverload("kind", typeof(K), "{value}.ToString(\"G\", CultureInfo.InvariantCulture)", Usings = new[] { "System", "System.Globalization" })]
                                      [DefaultOverload("retry", "true", Usings = new[] { "System", "System.Globalization" })]
                                      public void M(string kind, bool retry) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>
                     using System;
                     using System.Globalization;

                     partial class U
                     {
                         public void M(global::K kind, bool retry)
                             => M(kind.ToString("G", CultureInfo.InvariantCulture), retry);

                         public void M(string kind)
                             => M(kind, true);
                     }
                     """, output);
    }

    [Fact]
    public void Transform_TemplateValueSubstitutionIsExact()
    {
        // Ensure only {value} is replaced and surrounding text remains unchanged.
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum K { A }

                                  public partial class V
                                  {
                                      [TransformOverload("kind", typeof(K), "Format({value}.ToString(), nameof(value))")]
                                      public void M(string kind, string value) { }

                                      static string Format(string s, string n) => s + n;
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class V
                     {
                         public void M(global::K kind, string value)
                             => M(Format(kind.ToString(), nameof(value)), value);
                     }
                     """, output);
    }

    [Fact]
    public void DefaultExpression_IsEmittedVerbatim()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public static class Consts { public static readonly string K = "const"; }

                                  public partial class D
                                  {
                                      [DefaultOverload("mode", "global::Consts.K")]
                                      public void Run(string mode) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class D
                     {
                         public void Run()
                             => Run(global::Consts.K);
                     }
                     """, output);
    }
}