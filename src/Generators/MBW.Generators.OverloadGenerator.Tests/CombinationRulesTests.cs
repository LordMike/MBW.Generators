using System.Collections.Generic;
using MBW.Generators.OverloadGenerator.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class CombinationRulesTests
{
    [Fact]
    public void SameParameter_TransformAndDefault_GeneratesTwoOverloads()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum Mode { A, B }

                                  public partial class Svc
                                  {
                                      [TransformOverload("kind", typeof(Mode), "{value}.ToString()")]
                                      [DefaultOverload("kind", "\"A\"")]
                                      public void Act(string kind, int n) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>
                     

                     partial class Svc
                     {
                         public void Act(global::Mode kind, int n)
                             => Act(kind.ToString(), n);

                         public void Act(int n)
                             => Act("A", n);
                     }
                     """, output);
    }

    [Fact]
    public void DifferentParameters_ComposeIndependently()
    {
        // This test asserts that two distinct overloads (one per attribute) are generated;
        // if your generator supports cartesian combos, extend this assertion accordingly.
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum Mode { A, B }

                                  public partial class Svc2
                                  {
                                      [TransformOverload("kind", typeof(Mode), "{value}.ToString()")]
                                      [DefaultOverload("retry", "false")]
                                      public void Act(string kind, bool retry, int n) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class Svc2
                     {
                         public void Act(global::Mode kind, bool retry, int n)
                             => Act(kind.ToString(), retry, n);

                         public void Act(string kind, int n)
                             => Act(kind, false, n);
                     }
                     """, output);
    }
}