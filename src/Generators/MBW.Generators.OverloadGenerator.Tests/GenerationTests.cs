using System.Collections.Generic;
using MBW.Generators.OverloadGenerator.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class GenerationTests
{
    [Fact]
    public void DefaultOverload_Generates()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) = TestsHelper.RunHelper("""
                              using MBW.Generators.OverloadGenerator;
                              using MBW.Generators.OverloadGenerator.Attributes;

                              [DefaultOverload("retry", "true")]
                              public partial class Api
                              {
                                  public void Call(string path, bool retry) { }
                              }
                              """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                                // <auto-generated/>

                                partial class Api
                                {
                                    public void Call(string path) => Call(path, true);
                                }
                                """, output);
    }

    [Fact]
    public void TransformOverload_Generates()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) = TestsHelper.RunHelper("""
                              using MBW.Generators.OverloadGenerator;
                              using MBW.Generators.OverloadGenerator.Attributes;

                              [TransformOverload("id", typeof(string), "int.Parse({value})")]
                              public partial class Api2
                              {
                                  public void Find(int id) { }
                              }
                              """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                                // <auto-generated/>

                                partial class Api2
                                {
                                    public void Find(string id) => Find(int.Parse(id));
                                }
                                """, output);
    }

    [Fact]
    public void SignatureCollision_Reported()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) = TestsHelper.RunHelper("""
                              using MBW.Generators.OverloadGenerator;
                              using MBW.Generators.OverloadGenerator.Attributes;

                              [DefaultOverload("retry", "true")]
                              public partial class Api3
                              {
                                  public void Call(string path, bool retry) { }
                                  public void Call(string path) { }
                              }
                              """);

        Assert.Collection(diags, d => Assert.Equal(Diagnostics.SignatureCollision.Id, d.Id));
        Assert.Null(output);
    }
}
