using System.Collections.Generic;
using System.Threading.Tasks;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class Options
{
    [Fact]
    public async Task TypeBeatsAssembly()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  using System.Threading.Tasks;
                                  
                                  [assembly: GenerateNonTryOptions(returnGenerationStrategy: ReturnGenerationStrategy.Verbatim)]

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(returnGenerationStrategy: ReturnGenerationStrategy.TrueMeansNotNull)]
                                  public partial class TestClass
                                  {
                                      public Task<(bool ok, string? value)> TryMethodAsync()
                                          => Task.FromResult((true, (string?)"x"));
                                  }
                                  """);
        Assert.Empty(diags);
        // Type-level opts win; return becomes non-nullable
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;
                           using System.Threading.Tasks;

                           partial class TestClass
                           {
                               public async Task<string> MethodAsync()
                               {
                                   var tmp = await TryMethodAsync();
                                   if (tmp.Item1)
                                   {
                                       return tmp.Item2;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }
}