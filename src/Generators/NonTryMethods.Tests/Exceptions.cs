using System.Collections.Generic;
using System.Threading.Tasks;
using MBW.Generators.NonTryMethods.Generator;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class Exceptions
{
    [Fact]
    public async Task CustomException_Valid()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  using System;
                                  
                                  public class MyEx : Exception {}

                                  [GenerateNonTryMethod(typeof(MyEx))]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 0; return false; }
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public int Method()
                               {
                                   if (TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new MyEx();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task CustomException_Invalid_FallbackAndDiagnostic()
    {
        (string? _, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  [GenerateNonTryMethod(typeof(int))]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 0; return false; }
                                  }
                                  """);
        Assert.Collection(diags,
            d => Assert.Equal(Diagnostics.InvalidExceptionType.Id, d.Id));
    }
}