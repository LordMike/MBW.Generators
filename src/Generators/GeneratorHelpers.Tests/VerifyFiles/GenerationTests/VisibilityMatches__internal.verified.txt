{
  output:
// <auto-generated/>
#nullable enable
using System;
using Microsoft.CodeAnalysis;

namespace Microsoft.CodeAnalysis;

internal static class KnownInternalExtensions
{
    /// <summary>Returns <see langword="true"/> when the namespace of <paramref name="symbol"/> is <c>System</c> or nested within it.</summary>
    /// <param name="symbol">Symbol to check.</param>
    /// <returns><see langword="true"/> if <paramref name="symbol"/> is declared in <c>System</c> or a sub-namespace.</returns>
    public static bool IsInNamespaceNs(this ISymbol? symbol)
    {
        return IsInNamespaceNs(symbol as INamespaceSymbol ?? symbol?.ContainingNamespace);
    }

    /// <summary>Returns <see langword="true"/> when the namespace of <paramref name="symbol"/> is exactly <c>System</c>.</summary>
    /// <param name="symbol">Symbol to check.</param>
    /// <returns><see langword="true"/> if the namespace is exactly <c>System</c>.</returns>
    public static bool IsExactlyInNamespaceNs(this ISymbol? symbol)
    {
        return IsExactlyNamespaceNs(symbol as INamespaceSymbol ?? symbol?.ContainingNamespace);
    }

    /// <summary>Returns <see langword="true"/> when <paramref name="ns"/> is <c>System</c> or nested within it.</summary>
    /// <param name="ns">Namespace symbol to check.</param>
    /// <returns><see langword="true"/> if <paramref name="ns"/> is <c>System</c> or a sub-namespace.</returns>
    public static bool IsInNamespaceNs(this INamespaceSymbol? ns)
    {
        if (ns is null) return false;
        int depth = 0;
        for (var current = ns; current is not null && !current.IsGlobalNamespace; current = current.ContainingNamespace) depth++;
        if (depth < 1) return false;
        for (int i = 0; i < depth - 1; i++) ns = ns!.ContainingNamespace;
        if (ns is null || !ns.Name.Equals("System", StringComparison.Ordinal)) return false;
        ns = ns.ContainingNamespace;        return true;
    }

    /// <summary>Returns <see langword="true"/> when <paramref name="ns"/> is exactly <c>System</c>.</summary>
    /// <param name="ns">Namespace symbol to check.</param>
    /// <returns><see langword="true"/> if <paramref name="ns"/> equals <c>System</c>.</returns>
    public static bool IsExactlyNamespaceNs(this INamespaceSymbol? ns)
    {
        if (ns is null) return false;
        if (!ns.Name.Equals("System", StringComparison.Ordinal)) return false;
        ns = ns.ContainingNamespace;
        return ns != null && ns.IsGlobalNamespace;
    }

}
}