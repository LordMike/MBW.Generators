{
  output:
// <auto-generated/>
#nullable enable
using System;
using Microsoft.CodeAnalysis;

namespace Microsoft.CodeAnalysis;

public static class KnownExtensions
{
    /// <summary>Returns <see langword="true"/> when <paramref name="symbol"/> is exactly <c>System.IO.Compression.ZipArchive+Entry</c>.</summary>
    /// <param name="symbol">Symbol to check.</param>
    /// <returns><see langword="true"/> if <paramref name="symbol"/> is <c>System.IO.Compression.ZipArchive+Entry</c>.</returns>
    public static bool IsNamedExactlyTypeNested(this ISymbol? symbol)
    {
        if (symbol is null) return false;
        if (!symbol.Name.Equals("Entry", StringComparison.Ordinal)) return false;
        if (symbol is not INamedTypeSymbol t0) return false;        var t1 = t0.ContainingType;
        if (t1 is null || !t1.Name.Equals("ZipArchive", StringComparison.Ordinal)) return false;        if (t1.ContainingType is not null) return false;
        var ns = t1.ContainingNamespace;
        if (ns is null || !ns.Name.Equals("Compression", StringComparison.Ordinal)) return false;
        ns = ns.ContainingNamespace;        if (ns is null || !ns.Name.Equals("IO", StringComparison.Ordinal)) return false;
        ns = ns.ContainingNamespace;        if (ns is null || !ns.Name.Equals("System", StringComparison.Ordinal)) return false;
        ns = ns.ContainingNamespace;        return ns != null && ns.IsGlobalNamespace;
    }

}
}