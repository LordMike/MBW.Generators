using System.Collections.Generic;
using System.Threading.Tasks;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class Functionality
{
    [Fact]
    public async Task SyncBoolOut_Defaults()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public bool TryLoad(int a, int b, out int value)
                                      {
                                          value = a + b;
                                          return a >= 0 && b >= 0;
                                      }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public int Load(int a, int b)
                               {
                                   if (this.TryLoad(a, b, out var value))
                                       return value;

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task SyncBoolOut_CustomException()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  using System;
                                  
                                  public class MyEx : Exception {}

                                  [GenerateNonTryMethod(typeof(MyEx))]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public bool TryLoad(int a, int b, out int value)
                                      {
                                          value = a + b;
                                          return false;
                                      }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public int Load(int a, int b)
                               {
                                   if (this.TryLoad(a, b, out var value))
                                       return value;

                                   throw new MyEx();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task TaskTuple_Verbatim()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  using System.Threading.Tasks;
                                  
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public Task<(bool ok, string? value)> TryLoadAsync(int id)
                                          => Task.FromResult((id > 0, id > 0 ? $"#{id}" : null));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;
                           using System.Threading.Tasks;

                           partial class TestClass
                           {
                               public async Task<string?> LoadAsync(int id)
                               {
                                   var t = await this.TryLoadAsync(id);
                                   if (t.Item1)
                                       return t.Item2;

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task ValueTaskTuple_Verbatim()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  using System.Threading.Tasks;
                                  
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public ValueTask<(bool ok, int? value)> TryLoadAsync(int id)
                                          => new ValueTask<(bool,int?)>((id > 0, id > 0 ? id : (int?)null));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;
                           using System.Threading.Tasks;

                           partial class TestClass
                           {
                               public async ValueTask<int?> LoadAsync(int id)
                               {
                                   var t = await this.TryLoadAsync(id);
                                   if (t.Item1)
                                       return t.Item2;

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task TaskTuple_TrueMeansNotNull_ReferencePayload()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  using System.Threading.Tasks;
                                  
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(returnGenerationStrategy: ReturnGenerationStrategy.TrueMeansNotNull)]
                                  public partial class TestClass
                                  {
                                      public Task<(bool ok, string? value)> TryLoadAsync(int id)
                                          => Task.FromResult((id > 0, id > 0 ? $"#{id}" : null));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;
                           using System.Threading.Tasks;

                           partial class TestClass
                           {
                               public async Task<string> LoadAsync(int id)
                               {
                                   var t = await this.TryLoadAsync(id);
                                   if (t.Item1)
                                       return t.Item2;

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }
}