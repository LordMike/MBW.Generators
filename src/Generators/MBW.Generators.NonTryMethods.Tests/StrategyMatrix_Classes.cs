using System.Collections.Generic;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class StrategyMatrix_Classes
{
    [Fact]
    public void Auto_PartialInPlace()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Auto)]
                                  public class TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 1; return true; }
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public int Method()
                               {
                                   if (TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void Partial_ExplicitInPlace()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.PartialType)]
                                  public partial class TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 1; return true; }
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public int Method()
                               {
                                   if (TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void Extensions_InstanceReceiver()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Extensions)]
                                  public class TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 2; return true; }
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           public static class TestClass_NonTryExtensions
                           {
                               public static int Method(this TestClass self)
                               {
                                   if (self.TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void Extensions_StaticInput_ReportsCannotGenerateExtensionForStatic()
    {
        (string? _, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Extensions)]
                                  public class TestClass
                                  {
                                      public static bool TryMethod(out int v) { v = 0; return false; }
                                  }
                                  """);
        Assert.Collection(diags,
            d => Assert.Equal(Diagnostics.UnableToGenerateExtensionMethodForStaticMethod.Id, d.Id));
    }
}