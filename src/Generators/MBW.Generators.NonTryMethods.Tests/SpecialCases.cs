using System.Collections.Generic;
using System.Threading.Tasks;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class SpecialCases
{
    [Fact]
    public async Task Parameter_RefStruct_Span()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public bool TryWrite(Span<int> data, out int value)
                                      {
                                          value = data.Length;
                                          return true;
                                      }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public int Write(Span<int> data)
                               {
                                   if (TryWrite(data, out var value))
                                   {
                                       return value;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task Parameter_Pointer()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions]
                                  public unsafe partial class TestClass
                                  {
                                      public bool TryGet(int* ptr, out int value)
                                      {
                                          value = *ptr;
                                          return true;
                                      }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public unsafe int Get(int* ptr)
                               {
                                   if (TryGet(ptr, out var value))
                                   {
                                       return value;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task Method_Unsafe()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      public unsafe bool TryCalc(out int value)
                                      {
                                          int local = 1;
                                          int* ptr = &local;
                                          value = *ptr;
                                          return true;
                                      }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public int Calc()
                               {
                                   if (TryCalc(out var value))
                                   {
                                       return value;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task Method_ExternWithDllImport()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions]
                                  public partial class TestClass
                                  {
                                      [System.Runtime.InteropServices.DllImport("Native")]
                                      public static extern bool TryDo(int x, out int value);
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial class TestClass
                           {
                               public static int Do(int x)
                               {
                                   if (TryDo(x, out var value))
                                   {
                                       return value;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }
}

