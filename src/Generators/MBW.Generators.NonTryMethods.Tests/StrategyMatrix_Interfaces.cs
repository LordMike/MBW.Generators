using System.Collections.Generic;
using System.Threading.Tasks;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class StrategyMatrixInterfaces
{
    [Fact]
    public async Task Auto_DefaultImplementation_InInterface()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Auto)]
                                  public partial interface TestInterface
                                  {
                                      bool TryMethod(out int v);
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial interface TestInterface
                           {
                               int Method()
                               {
                                   if (TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task PartialType_DefaultImplementation_InInterface()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.PartialType)]
                                  public partial interface TestInterface
                                  {
                                      bool TryMethod(out int v);
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial interface TestInterface
                           {
                               int Method()
                               {
                                   if (TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public async Task Extensions_Interface_GeneratesExtension()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            await TestsHelper.RunHelperAsync("""
                                  
                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Extensions)]
                                  public interface TestInterface
                                  {
                                      bool TryMethod(out int v);
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           public static class TestInterface_NonTryExtensions
                           {
                               public static int Method(this TestInterface self)
                               {
                                   if (self.TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }
}