using System.Collections.Generic;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

public sealed class TargetingAndNamingTests
{
    [Fact]
    public void ClassLevel_Targets_All_Try_In_Type()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  public partial class Many
                                  {
                                      public bool TryA(out int v) { v = 1; return true; }
                                      public bool TryB(out int v) { v = 2; return true; }
                                      public bool TryC(out int v) { v = 3; return true; }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class Many
                           {
                               public int A()
                               {
                                   if (TryA(out var v)) return v;
                                   throw new InvalidOperationException();
                               }

                               public int B()
                               {
                                   if (TryB(out var v)) return v;
                                   throw new InvalidOperationException();
                               }

                               public int C()
                               {
                                   if (TryC(out var v)) return v;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void AssemblyLevel_Targets_Class()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;
                                  [assembly: GenerateNonTryMethod]

                                  public partial class FromAsm
                                  {
                                      public bool TryDo(out int v) { v = 42; return true; }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class FromAsm
                           {
                               public int Do()
                               {
                                   if (TryDo(out var v)) return v;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void CustomPattern_Still_Uses_CaptureGroup1()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  // Pattern keeps part after 'try' ignoring case, but demands a leading underscore before it.
                                  [GenerateNonTryMethod(methodNamePattern: "^[Tt][Rr][Yy]_(.*)")]
                                  public partial class Pat
                                  {
                                      public bool Try_Get(out string s) { s = "v"; return true; }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class Pat
                           {
                               public string Get()
                               {
                                   if (Try_Get(out var s)) return s;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }
}