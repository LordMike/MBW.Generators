using System.Collections.Generic;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

public sealed class AsyncExceptionOverrideTests
{
    [Fact]
    public void Async_With_Custom_ExceptionType()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using System.Threading.Tasks;
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod(exceptionType: typeof(System.ArgumentException))]
                                  [GenerateNonTryAsyncOptions]
                                  public partial class RepoX
                                  {
                                      public Task<(bool ok, string value)> TryGetAsync() => Task.FromResult((false, "nope"));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class RepoX
                           {
                               public async Task<string> GetAsync()
                               {
                                   var (ok, v) = await TryGetAsync();
                                   if (ok) return v;
                                   throw new ArgumentException();
                               }
                           }
                           """, output);
    }
}