using System.Collections.Generic;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

public sealed class EdgeCasesAndDiagnosticsTests
{
    [Fact]
    public void InvalidRegex_Emits_NT002()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod(methodNamePattern: "[")]
                                  public partial class BadRegex
                                  {
                                      public bool TryX(out int v) { v = 1; return true; }
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == "NT002");
    }

    [Fact]
    public void InvalidExceptionType_Emits_NT004()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod(exceptionType: typeof(string))]
                                  public partial class BadExc
                                  {
                                      public bool TryX(out int v) { v = 1; return true; }
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == "NT004");
    }

    [Fact]
    public void EmptyGeneratedName_Emits_NT007()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  public partial class EmptyName
                                  {
                                      public bool Try(out int v) { v = 0; return true; }
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == "NT007");
    }

    [Fact]
    public void SignatureCollision_Emits_NT008_And_Skips_Code()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  public partial class Collide
                                  {
                                      public bool TryCompute(int a, out int v) { v = a; return true; }

                                      // Existing non-try with same signature the generator would create
                                      public int Compute(int a) => a;
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == "NT008");
        // No code is fine (skipped); or generator may still emit a header with no methods.
        // We'll accept empty or header-only.
    }

    [Fact]
    public void DuplicateAttributes_Produce_NT009_Once()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryMethod] // duplicate
                                  public partial class Dup
                                  {
                                      public bool TryX(out int v) { v = 5; return true; }
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == "NT009");
        // Still expect single method emitted
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class Dup
                           {
                               public int X()
                               {
                                   if (TryX(out var v)) return v;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void NonPartial_Target_Emits_NT001()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  public class NotPartial
                                  {
                                      public bool TryX(out int v) { v = 1; return true; }
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == "NT001");
    }
}