using System.Collections.Generic;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

public sealed class AsyncBasicsTests
{
    [Fact]
    public void TaskTuple_Verbatim_DefaultsTo_InvalidOperationException()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using System.Threading;
                                  using System.Threading.Tasks;
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryAsyncOptions]
                                  public partial class Repo
                                  {
                                      public Task<(bool ok, string? value)> TryFetchAsync(int id, CancellationToken ct)
                                          => Task.FromResult((id > 0, id > 0 ? "val" : null));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class Repo
                           {
                               public async Task<string?> FetchAsync(int id, System.Threading.CancellationToken ct)
                               {
                                   var (ok, v) = await TryFetchAsync(id, ct);
                                   if (ok) return v;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void ValueTaskTuple_Verbatim()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using System.Threading.Tasks;
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryAsyncOptions]
                                  public partial class Vt
                                  {
                                      public ValueTask<(bool ok, int value)> TryCalcAsync(int x) => ValueTask.FromResult((x > 0, x));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class Vt
                           {
                               public async ValueTask<int> CalcAsync(int x)
                               {
                                   var (ok, v) = await TryCalcAsync(x);
                                   if (ok) return v;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void TaskTuple_TrueMeansNotNull_StripsNullable_ReferenceType()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using System.Threading.Tasks;
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryAsyncOptions(AsyncCandidateStrategy.TupleBooleanAndValue, AsyncGenerationStrategy.TrueMeansNotNull)]
                                  public partial class Repo2
                                  {
                                      public Task<(bool ok, string? value)> TryLoadAsync(string k) => Task.FromResult((k != null, k));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class Repo2
                           {
                               public async Task<string> LoadAsync(string k)
                               {
                                   var (ok, v) = await TryLoadAsync(k);
                                   if (ok) return v;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void ValueTaskTuple_TrueMeansNotNull_UnwrapsNullable_ValueType()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using System.Threading.Tasks;
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryAsyncOptions(AsyncCandidateStrategy.TupleBooleanAndValue, AsyncGenerationStrategy.TrueMeansNotNull)]
                                  public partial class Repo3
                                  {
                                      public ValueTask<(bool ok, int? value)> TryLoadAsync(int k) => ValueTask.FromResult((k >= 0, (int?)k));
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>

                           partial class Repo3
                           {
                               public async ValueTask<int> LoadAsync(int k)
                               {
                                   var (ok, v) = await TryLoadAsync(k);
                                   if (ok) return v;
                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void Async_ShapeMismatch_Emits_NT006()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using System.Threading.Tasks;
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryAsyncOptions]
                                  public partial class Bad
                                  {
                                      // Matches name, but return type is Task<bool>, not Task<(bool,T)>
                                      public Task<bool> TryPingAsync() => Task.FromResult(true);
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == "NT006");
    }
}