using System.Collections.Generic;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class StrategyMatrix_Structs
{
    [Fact]
    public void Auto_PartialInPlace_Struct()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Auto)]
                                  public struct TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 3; return true; }
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial struct TestClass
                           {
                               public int Method()
                               {
                                   if (TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void Extensions_Mutable_RefThisReceiver()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Extensions)]
                                  public struct TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 4; return true; }
                                  }
                                  """);
        Assert.Empty(diags);
        // expecting 'this ref TestClass'
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           public static class TestClass_NonTryExtensions
                           {
                               public static int Method(this ref TestClass self)
                               {
                                   if (self.TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void Extensions_ReadonlyStruct_InThisReceiver()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Extensions)]
                                  public readonly struct TestClass
                                  {
                                      public bool TryMethod(out int v) { v = 5; return true; }
                                  }
                                  """);
        Assert.Empty(diags);
        // expecting 'this in TestClass'
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           public static class TestClass_NonTryExtensions
                           {
                               public static int Method(this in TestClass self)
                               {
                                   if (self.TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }

    [Fact]
    public void Extensions_StaticInput_Struct_ReportsCannotGenerateExtensionForStatic()
    {
        (string? _, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  [GenerateNonTryOptions(methodsGenerationStrategy: MethodsGenerationStrategy.Extensions)]
                                  public struct TestClass
                                  {
                                      public static bool TryMethod(out int v) { v = 0; return false; }
                                  }
                                  """);
        Assert.Collection(diags,
            d => Assert.Equal(Diagnostics.UnableToGenerateExtensionMethodForStaticMethod.Id, d.Id));
    }
}