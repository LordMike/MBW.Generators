using System.Collections.Generic;
using MBW.Generators.NonTryMethods.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.NonTryMethods.Tests;

public class Visibility
{
    [Theory]
    [InlineData("public")]
    [InlineData("internal")]
    [InlineData("protected")]
    [InlineData("private")]
    public void EmittedCode_UsesVisibilityOfSource_Method(string accessibility)
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper($$"""
                                    using MBW.Generators.NonTryMethods.Attributes;

                                    [GenerateNonTryMethod]
                                    internal partial class TestClass
                                    {
                                        {{accessibility}} bool TryMethod(out int value)
                                        {
                                            value = 0;
                                            return true;
                                        }
                                    }
                                    """);
        Assert.Empty(diags);
        SyntaxHelper.Equal($$"""
                             // <auto-generated/>
                             #nullable enable
                             using System;

                             partial class TestClass
                             {
                                 {{accessibility}} int Method()
                                 {
                                     if (TryMethod(out var value))
                                     {
                                         return value;
                                     }

                                     throw new InvalidOperationException();
                                 }
                             }
                             """, output);
    }
    
    [Fact]
    public void EmittedCode_UsesVisibilityOfSource_InterfaceMethods()
    {
        // Interface methods must never have any visibility modifier, they are public by default.
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.NonTryMethods.Attributes;

                                  [GenerateNonTryMethod]
                                  public partial interface TestInterface
                                  {
                                      bool TryMethod(out int v);
                                  }
                                  """);
        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                           // <auto-generated/>
                           #nullable enable
                           using System;

                           partial interface TestInterface
                           {
                               int Method()
                               {
                                   if (TryMethod(out var v))
                                   {
                                       return v;
                                   }

                                   throw new InvalidOperationException();
                               }
                           }
                           """, output);
    }
}