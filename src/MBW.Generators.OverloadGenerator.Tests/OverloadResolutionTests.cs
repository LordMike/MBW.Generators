using System.Collections.Generic;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class OverloadResolutionTests
{
    [Fact(Skip = "Test compilation does not include source-genned code atm")]
    public void ResolvesToGeneratedOverload_WhenArgumentMatches()
    {
        // Compile both class and a call site, ensure no ambiguity errors.
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper(
                """
                using MBW.Generators.OverloadGenerator;
                using MBW.Generators.OverloadGenerator.Attributes;
                public enum K { A, B }
                public partial class S
                {
                    [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                    public string Go(string kind, int n) => kind + n;
                }

                public class Use
                {
                    public string Exec()
                    {
                        var s = new S();
                        return s.Go(K.A, 3); // should bind to generated overload
                    }
                }
                """
            );

        Assert.Empty(diags);
        Assert.Contains("public string Go(global::K kind, int n)", output);
    }

    [Fact]
    public void DefaultParameters_DoNotIntroduceAmbiguity()
    {
        // Removing a parameter shouldn't conflict with existing defaulted parameters.
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public partial class S2
                                  {
                                      [DefaultOverload("mode", "\"x\"")]
                                      public void Run(string mode, int a = 1, int b = 2) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class S2
                     {
                         public void Run(int a = 1, int b = 2)
                             => Run("x", a, b);
                     }
                     """, output);
    }
}