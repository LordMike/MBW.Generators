using System.Collections.Generic;
using MBW.Generators.OverloadGenerator.Tests.Helpers;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class ReturnTypesTests
{
    [Fact]
    public void Forwarding_VoidAndNonVoidBehaviors()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator.Generator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum K { A }

                                  public partial class R
                                  {
                                      [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                                      public void V(string kind) { }

                                      [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                                      public int I(string kind) => 1;
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class R
                     {
                         public void V(global::K kind)
                             => V(kind.ToString());

                         public int I(global::K kind)
                             => I(kind.ToString());
                     }
                     """, output);
    }

    [Fact]
    public void Forwarding_TaskAndValueTask_AreReturnedDirectly()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using System.Threading.Tasks;
                                  using MBW.Generators.OverloadGenerator.Generator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum K { A }

                                  public partial class R2
                                  {
                                      [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                                      public Task<int> T(string kind) => Task.FromResult(1);

                                      [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                                      public ValueTask VT(string kind) => ValueTask.CompletedTask;
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class R2
                     {
                         public global::System.Threading.Tasks.Task<int> T(global::K kind)
                             => T(kind.ToString());

                         public global::System.Threading.Tasks.ValueTask VT(global::K kind)
                             => VT(kind.ToString());
                     }
                     """, output);
    }
}