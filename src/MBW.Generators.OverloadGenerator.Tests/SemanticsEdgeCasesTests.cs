using System.Collections.Generic;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class SemanticsEdgeCasesTests
{
    [Fact]
    public void Nullability_PreservedForNonTargetParts()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  #nullable enable
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;
                                  public enum K { A }

                                  public partial class N
                                  {
                                      [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                                      public string? M(string kind, string? optional) => optional;
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class N
                     {
                         public string? M(global::K kind, string? optional)
                             => M(kind.ToString(), optional);
                     }
                     """, output);
    }

    [Fact]
    public void Transform_WithFormatStringsAndCulture_Works()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum Flags { A = 1, B = 2 }

                                  public partial class F
                                  {
                                      [TransformOverload("k", typeof(Flags), "{value}.ToString(\"F\", System.Globalization.CultureInfo.InvariantCulture)", Usings = new[] { "System", "System.Globalization" })]
                                      public void M(string k) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>
                     using System;
                     using System.Globalization;

                     partial class F
                     {
                         public void M(global::Flags k)
                             => M(k.ToString("F", System.Globalization.CultureInfo.InvariantCulture));
                     }
                     """, output);
    }

    [Fact]
    public void Transform_DefaultParameterWithNewline_Works()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public partial class F
                                  {
                                      [TransformOverload("k", typeof(int), "{value}.ToString()")]
                                      public void M(string k, string special = "value\n") { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                               // <auto-generated/>

                               partial class F
                               {
                                   public void M(int k, string special = "value\n")
                                       => M(k.ToString(), special);
                               }
                               """, output);
    }
}