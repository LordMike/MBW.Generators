using System.Collections.Generic;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class TypeTopologyTests
{
    [Fact]
    public void EmitsInSameNamespaceAndPartialType()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  namespace N1.N2
                                  {
                                      using MBW.Generators.OverloadGenerator;
                                      using MBW.Generators.OverloadGenerator.Attributes;

                                      public enum K { A }

                                      public partial class T
                                      {
                                          [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                                          public void M(string kind) { }
                                      }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     namespace N1.N2
                     {
                         partial class T
                         {
                             public void M(global::N1.N2.K kind)
                                 => M(kind.ToString());
                         }
                     }
                     """, output);
    }

    [Fact]
    public void PartialTypes_GeneratesOnceAcrossFiles()
    {
        // Two partial declarations in the same input â€“ generator should not duplicate.
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper(
                """
                using MBW.Generators.OverloadGenerator;
                using MBW.Generators.OverloadGenerator.Attributes;

                public enum K { A }
                public partial class P
                {
                    [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                    public void A(string kind) { }
                }

                public partial class P
                {
                    public void B(int x) { }
                }
                """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                     // <auto-generated/>

                     partial class P
                     {
                         public void A(global::K kind)
                             => A(kind.ToString());
                     }
                     """, output);
    }
}