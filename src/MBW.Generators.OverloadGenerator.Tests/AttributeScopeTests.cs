using System.Collections.Generic;
using MBW.Generators.Tests.Common;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class AttributeScopeTests
{
    [Fact]
    public void ClassLevelAttribute_AppliesToAllEligibleMethods()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum OrderKind { Standard, Express }

                                  [TransformOverload("kind", typeof(OrderKind), "{value}.ToString()", Usings = new[] { "System" })]
                                  public partial class Orders
                                  {
                                      public void Create(string kind, int qty) { }
                                      public void Ship(string kind, int qty, bool insured) { }
                                      public void Ignore(int qty) { }
                                  }
                                  """);

        Assert.Collection(diags, d => Assert.Equal(Diagnostics.MissingParameter.Id, d.Id));

        SyntaxHelper.Equal("""
                               // <auto-generated/>
                               using System;

                               partial class Orders
                               {
                                   public void Create(global::OrderKind kind, int qty)
                                       => Create(kind.ToString(), qty);

                                   public void Ship(global::OrderKind kind, int qty, bool insured)
                                       => Ship(kind.ToString(), qty, insured);
                               }
                               """, output);
    }

    [Fact]
    public void MethodLevelAttribute_AppliesOnlyToAnnotatedMethod()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;
                                  public enum K { A, B }

                                  public partial class C
                                  {
                                      [TransformOverload("kind", typeof(K), "{value}.ToString()")]
                                      public void M1(string kind, int x) { }

                                      public void M2(string kind, int x) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                               // <auto-generated/>

                               partial class C
                               {
                                   public void M1(global::K kind, int x)
                                       => M1(kind.ToString(), x);
                               }
                               """, output);
    }

    [Fact]
    public void MethodLevelOverride_WinsOverClassLevel()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;
                                  using System.Globalization;

                                  public enum K { A, B }

                                  [TransformOverload("kind", typeof(K), "{value}.ToString().ToLowerInvariant()")]
                                  public partial class C
                                  {
                                      public void M1(string kind, int x) { }

                                      [TransformOverload("kind", typeof(K), "{value}.ToString().ToUpperInvariant()")]
                                      public void M2(string kind, int x) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                               // <auto-generated/>

                               partial class C
                               {
                                   public void M1(global::K kind, int x)
                                       => M1(kind.ToString().ToLowerInvariant(), x);

                                   public void M2(global::K kind, int x)
                                       => M2(kind.ToString().ToUpperInvariant(), x);
                               }
                               """, output);
    }

    [Fact]
    public void MultipleAttributes_TargetDifferentParameters_Compose()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;
                                  using System.Globalization;

                                  public enum Kind { A, B }

                                  [TransformOverload("kind", typeof(Kind), "{value}.ToString()")]
                                  [DefaultOverload("retry", "true")]
                                  public partial class Client
                                  {
                                      public void Call(string kind, bool retry, int code) { }
                                  }
                                  """);

        Assert.Empty(diags);
        SyntaxHelper.Equal("""
                               // <auto-generated/>

                               partial class Client
                               {
                                   public void Call(global::Kind kind, bool retry, int code)
                                       => Call(kind.ToString(), retry, code);

                                   public void Call(string kind, int code)
                                       => Call(kind, true, code);
                               }
                               """, output);
    }
}