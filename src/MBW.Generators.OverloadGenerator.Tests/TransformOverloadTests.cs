using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class TransformOverloadTests
{
    [Fact]
    public void Transform_ReplacesType_AndForwardsWithTemplate()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;
                                  using System.Globalization;

                                  public enum Op { Charge, Refund }

                                  public partial class Billing
                                  {
                                      [TransformOverload("kind", typeof(Op), "{value}.ToString(\"G\", System.Globalization.CultureInfo.InvariantCulture)", Usings = new[] { "System" })]
                                      public int Do(string kind, decimal amount) => 0;
                                  }
                                  """);

        Assert.Empty(diags);
        TestsHelper.CheckEqual("""
                               // <auto-generated/>
                               using System;

                               partial class Billing
                               {
                                   public int Do(global::Op kind, decimal amount)
                                       => Do(kind.ToString("G", System.Globalization.CultureInfo.InvariantCulture), amount);
                               }
                               """, output);
    }

    [Fact]
    public void Transform_PreservesNameAndAccessibilityAndStatic()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum E { A }

                                  public static partial class Util
                                  {
                                      [TransformOverload("kind", typeof(E), "{value}.ToString()")]
                                      public static void Do(string kind, int x) { }
                                  }
                                  """);

        Assert.Empty(diags);
        TestsHelper.CheckEqual("""
                               // <auto-generated/>

                               static partial class Util
                               {
                                   public static void Do(global::E kind, int x)
                                       => Do(kind.ToString(), x);
                               }
                               """, output);
    }

    [Fact]
    public void Transform_PreservesTypeParametersAndConstraints()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum E { A }

                                  public partial class G
                                  {
                                      [TransformOverload("kind", typeof(E), "{value}.ToString()")]
                                      public T Do<T>(string kind, T def) where T : class, new() => def;
                                  }
                                  """);

        Assert.Empty(diags);
        TestsHelper.CheckEqual("""
                               // <auto-generated/>

                               partial class G
                               {
                                   public T Do<T>(global::E kind, T def)
                                       where T : class, new()
                                       => Do<T>(kind.ToString(), def);
                               }
                               """, output);
    }

    [Fact]
    public void Transform_PreservesRefInOutAndParams()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum E { A }

                                  public partial class H
                                  {
                                      [TransformOverload("kind", typeof(E), "{value}.ToString()")]
                                      public void Do(string kind, ref int x, out int y, params string[] rest) { y = 0; }
                                  }
                                  """);

        Assert.Empty(diags);
        TestsHelper.CheckEqual("""
                               // <auto-generated/>

                               partial class H
                               {
                                   public void Do(global::E kind, ref int x, out int y, params string[] rest)
                                       => Do(kind.ToString(), ref x, out y, rest);
                               }
                               """, output);
    }

    [Fact]
    public void Transform_SkipsWhenSignatureAlreadyExists_EmitsCollisionDiagnostic()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public enum E { A }

                                  public partial class Dup
                                  {
                                      [TransformOverload("kind", typeof(E), "{value}.ToString()")]
                                      public void Do(string kind, int x) { }

                                      // Existing enum overload that would collide
                                      public void Do(E kind, int x) { }
                                  }
                                  """);

        Assert.Contains(diags, d => d.Id == Diagnostics.SignatureCollision.Id);
        Assert.Null(output);
    }

    [Fact]
    public void Transform_OnThisParameter_PreservesThisModifier()
    {
        (string? output, var diags) = TestsHelper
            .RunHelper("""
                       using MBW.Generators.OverloadGenerator;
                       using MBW.Generators.OverloadGenerator.Attributes;

                       public static partial class Ext2
                       {
                           [TransformOverload("s", typeof(System.ReadOnlySpan<char>), "{value}.ToString()", Usings = new[] { "System" })]
                           public static int CountDigits(this string s) => 0;
                       }
                       """);

        Assert.Empty(diags);
        TestsHelper.CheckEqual("""
                               // <auto-generated/>
                               using System;

                               static partial class Ext2
                               {
                                   public static int CountDigits(this global::System.ReadOnlySpan<char> s)
                                       => CountDigits(s.ToString());
                               }
                               """, output);
    }
}