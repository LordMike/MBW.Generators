using System.Linq;
using MBW.Generators.OverloadGenerator;
using MBW.Generators.Tests.Common;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class OverloadGeneratorTests
{
    [Fact]
    public void EnumTransformAndDefault()
    {
        const string input = """
using MBW.Generators.OverloadGenerator;
using System.Globalization;

public enum OrderKind { Standard, Express }

[TransformOverload("kind", typeof(OrderKind), "{value}.ToString("G", CultureInfo.InvariantCulture)", Usings = new[] { "System.Globalization" })]
[DefaultOverload("kind", "\"standard\"")]
public partial class Orders
{
    public void Create(string kind, int qty) { }
}
""";

        const string expected = """
// <auto-generated/>
using System.Globalization;

partial class Orders
{
    public void Create(global::OrderKind kind, int qty)
        => Create(kind.ToString("G", CultureInfo.InvariantCulture), qty);

    public void Create(int qty)
        => Create("standard", qty);
}
""";

        var (sources, diags) = GeneratorTestHelper.Run<OverloadGenerator>(input, typeof(DefaultOverloadAttribute));
        Assert.Empty(diags);
        Assert.True(sources.ContainsKey("Orders.Overloads.g.cs"));
        Assert.Equal(expected.Replace("\r\n", "\n"), sources["Orders.Overloads.g.cs"].Replace("\r\n", "\n"));
    }

    [Fact]
    public void TimeSpanTransform()
    {
        const string input = """
using MBW.Generators.OverloadGenerator;

public partial class Client
{
    [TransformOverload("timeoutMs", typeof(System.TimeSpan), "(int){value}.TotalMilliseconds", Usings = new[] { "System" })]
    public void Call(int timeoutMs, bool retry) { }
}
""";

        const string expected = """
// <auto-generated/>
using System;

partial class Client
{
    public void Call(global::System.TimeSpan timeoutMs, bool retry)
        => Call((int)timeoutMs.TotalMilliseconds, retry);
}
""";

        var (sources, diags) = GeneratorTestHelper.Run<OverloadGenerator>(input, typeof(DefaultOverloadAttribute));
        Assert.Empty(diags);
        Assert.True(sources.ContainsKey("Client.Overloads.g.cs"));
        Assert.Equal(expected.Replace("\r\n", "\n"), sources["Client.Overloads.g.cs"].Replace("\r\n", "\n"));
    }

    [Fact]
    public void MethodLevelOverrideBeatsClassLevel()
    {
        const string input = """
using MBW.Generators.OverloadGenerator;

[TransformOverload("kind", typeof(MyEnum), "{value}.ToString().ToLowerInvariant()")]
public partial class Billing
{
    public void Charge(string kind, decimal amount) { }

    [TransformOverload("kind", typeof(MyEnum), "{value}.ToString().ToUpperInvariant()")]
    public void Refund(string kind, decimal amount) { }
}

public enum MyEnum { A, B }
""";

        var (sources, diags) = GeneratorTestHelper.Run<OverloadGenerator>(input, typeof(DefaultOverloadAttribute));
        Assert.Empty(diags);
        Assert.True(sources.ContainsKey("Billing.Overloads.g.cs"));
        var generated = sources["Billing.Overloads.g.cs"].Replace("\r\n", "\n");
        Assert.Contains("=> Charge(kind.ToString().ToLowerInvariant(), amount);", generated);
        Assert.Contains("=> Refund(kind.ToString().ToUpperInvariant(), amount);", generated);
    }

    [Fact]
    public void CollisionDiagnostic()
    {
        const string input = """
using MBW.Generators.OverloadGenerator;

public partial class Sample
{
    public void Do(string value) { }
    public void Do(int value) { }

    [TransformOverload("value", typeof(int), "{value}.ToString()")]
    public void Do(string value, int other) { }
}
""";

        var (sources, diags) = GeneratorTestHelper.Run<OverloadGenerator>(input, typeof(DefaultOverloadAttribute));
        Assert.Single(diags);
        Assert.Equal("OG001", diags[0].Id);
        Assert.Empty(sources);
    }
}
