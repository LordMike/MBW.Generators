using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Xunit;

namespace MBW.Generators.OverloadGenerator.Tests;

public class DefaultOverloadTests
{
    [Fact]
    public void Default_RemovesParameter_AndForwardsWithLiteral()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public partial class Api
                                  {
                                      [DefaultOverload("retry", "true")]
                                      public void Call(string path, bool retry, int code = 42) { }
                                  }
                                  """);

        Assert.Empty(diags);
        TestsHelper.CheckEqual("""
                               // <auto-generated/>

                               partial class Api
                               {
                                   public void Call(string path, int code = 42)
                                       => Call(path, true, code);
                               }
                               """, output);
    }

    [Fact]
    public void Default_SkipsOnSignatureCollision()
    {
        (string? output, IReadOnlyList<Diagnostic> diags) =
            TestsHelper.RunHelper("""
                                  using MBW.Generators.OverloadGenerator;
                                  using MBW.Generators.OverloadGenerator.Attributes;

                                  public partial class Api2
                                  {
                                      [DefaultOverload("retry", "true")]
                                      public void Call(string path, bool retry) { }

                                      // Colliding signature after removal
                                      public void Call(string path) { }
                                  }
                                  """);

        Assert.Collection(diags, d => Assert.Equal(Diagnostics.SignatureCollision.Id, d.Id));
        Assert.Null(output);
    }

    [Fact]
    public void Default_DisallowRemovingThis_OnExtensionMethod()
    {
        (string? output, var diags) = TestsHelper
            .RunHelper("""
                       using MBW.Generators.OverloadGenerator;
                       using MBW.Generators.OverloadGenerator.Attributes;

                       public static partial class Ext
                       {
                           [DefaultOverload("s", "\"x\"")]
                           public static void M(this string s, int n) { }
                       }
                       """);

        Assert.Contains(diags, d => d.Id == Diagnostics.CannotRemoveThis.Id);
        Assert.Null(output);
    }
}